version: "3.9"
services:
  
  mssql:
    container_name: mssql
    image: mcr.microsoft.com/mssql/server
    ports:
      - "1433"
    environment:
      SA_PASSWORD: "!MyStrongPassword"
      ACCEPT_EULA: "Y"
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "$$SA_PASSWORD" -Q "SELECT 1" || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 1500M
    networks:
      - internal
  
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 500M
    networks:
      - internal

  mongodb:
    container_name: mongodb
    image: mongo
    ports:
      - "27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: "mongoadmin"
      MONGO_INITDB_ROOT_PASSWORD: "secret"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongodb:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 500M
    networks:
      - internal
  
  account:
    image: account
    build:
      context: .
      dockerfile: ./src/Services/Account/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: any
  
  catalog:
    image: catalog
    build:
      context: .
      dockerfile: ./src/Services/Catalog/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: any
  
  identity:
    image: identity
    build:
      context: .
      dockerfile: ./src/Services/Identity/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: any
  
  order:
    image: order
    build:
      context: .
      dockerfile: ./src/Services/Order/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: any
  
  payment:
    image: payment
    build:
      context: .
      dockerfile: ./src/Services/Payment/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: any
  
  shoppingcart:
    image: shoppingcart
    build:
      context: .
      dockerfile: ./src/Services/ShoppingCart/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: any
  
  warehouse:
    image: warehouse
    build:
      context: .
      dockerfile: ./src/Services/Warehouse/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Staging
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - internal
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: any
  
  webapi:
    image: webapi
    build:
      context: .
      dockerfile: ./src/Web/WebAPI/Dockerfile
    environment:
      ASPNETCORE_URLS: http://*:5000
      ASPNETCORE_ENVIRONMENT: Staging
    ports:
      - "5000"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      internal:
        aliases:
          - webapi
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: any
  
  webapp:
    image: webapp
    build:
      context: .
      dockerfile: ./src/Web/WebAPP/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: Staging
    ports:
      - "80"
    depends_on:
      webapi:
        condition: service_started
    networks:
      internal:
        aliases:
          - webapp
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: any

  nginx:
    container_name: nginx
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      webapi:
        condition: service_started
      webapp:
        condition: service_started
    ports:
      - "8080:80"
      - "5000:5000"
    networks:
      - internal

networks:
  internal:
    name: internal
    driver: bridge