version: "3.9"
services:
  
  account:
    image: account
    build:
      context: .
      dockerfile: ./src/Services/Account/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Production
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - ecommerce
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.70'
          memory: 90M
        reservations:
          memory: 60M
      restart_policy:
        condition: on-failure
  
  identity:
    image: identity
    build:
      context: .
      dockerfile: ./src/Services/Identity/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Production
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - ecommerce
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.70'
          memory: 90M
        reservations:
          memory: 60M
      restart_policy:
        condition: on-failure
  
  order:
    image: order
    build:
      context: .
      dockerfile: ./src/Services/Order/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Production
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - ecommerce
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.70'
          memory: 90M
        reservations:
          memory: 60M
      restart_policy:
        condition: on-failure
  
  payment:
    image: payment
    build:
      context: .
      dockerfile: ./src/Services/Payment/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Production
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - ecommerce
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.70'
          memory: 90M
        reservations:
          memory: 60M
      restart_policy:
        condition: on-failure
  
  shoppingcart:
    image: shoppingcart
    build:
      context: .
      dockerfile: ./src/Services/ShoppingCart/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Production
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - ecommerce
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.70'
          memory: 90M
        reservations:
          memory: 60M
      restart_policy:
        condition: on-failure
        
  warehouse:
    image: warehouse
    build:
      context: .
      dockerfile: ./src/Services/Warehouse/WorkerService/Dockerfile
    environment:
      DOTNET_ENVIRONMENT: Production
    depends_on:
      mssql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - ecommerce
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.70'
          memory: 90M
        reservations:
          memory: 60M
      restart_policy:
        condition: on-failure
  
  webapi:
    image: webapi
    build:
      context: .
      dockerfile: ./src/Web/WebAPI/Dockerfile
    environment:
      ASPNETCORE_URLS: http://*:5000
      ASPNETCORE_ENVIRONMENT: Production
    ports:
      - "5000"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.50'
          memory: 260M
        reservations:
          memory: 200M
      restart_policy:
        condition: on-failure

  nginx:
    container_name: nginx
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      webapi:
        condition: service_started
    ports:
      - "4000:4000"
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 180M
        reservations:
          memory: 120M
    networks:
      - ecommerce

networks:
  ecommerce:
    name: ecommerce
    driver: bridge