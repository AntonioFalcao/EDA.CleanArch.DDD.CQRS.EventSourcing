Index: src/Infrastructure/DependencyInjection/Extensions/ServiceCollectionExtensions.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing System.Reflection;\r\nusing Application.Abstractions.UseCases;\r\nusing Application.EventSourcing.Customers.EventStore;\r\nusing Application.EventSourcing.Customers.Projections;\r\nusing Application.UseCases.Customers.Commands.DeleteCustomer;\r\nusing Application.UseCases.Customers.Commands.RegisterCustomer;\r\nusing Application.UseCases.Customers.Commands.UpdateCustomer;\r\nusing Application.UseCases.Customers.EventHandlers.CustomerDeleted;\r\nusing Application.UseCases.Customers.EventHandlers.CustomerRegistered;\r\nusing Application.UseCases.Customers.EventHandlers.CustomerUpdated;\r\nusing Domain.Abstractions.Events;\r\nusing Domain.Entities.Customers;\r\nusing Infrastructure.DependencyInjection.Options;\r\nusing Infrastructure.EventSourcing.Customers.EventStore;\r\nusing Infrastructure.EventSourcing.Customers.EventStore.Contexts;\r\nusing Infrastructure.EventSourcing.Customers.Projections;\r\nusing Infrastructure.EventSourcing.Customers.Projections.Contexts;\r\nusing MassTransit;\r\nusing MassTransit.Definition;\r\nusing MassTransit.ExtensionsDependencyInjectionIntegration;\r\nusing MassTransit.RabbitMqTransport;\r\nusing Microsoft.EntityFrameworkCore;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Options;\r\nusing MongoDB.Bson;\r\nusing MongoDB.Bson.Serialization;\r\nusing MongoDB.Bson.Serialization.Serializers;\r\n\r\nnamespace Infrastructure.DependencyInjection.Extensions\r\n{\r\n    public static class ServiceCollectionExtensions\r\n    {\r\n        private static readonly RabbitMqOptions RabbitMqOptions = new();\r\n        \r\n        public static IServiceCollection AddMassTransitWithRabbitMq(this IServiceCollection services, Action<RabbitMqOptions> optionsAction)\r\n            => services.AddMassTransit(cfg =>\r\n                {\r\n                    optionsAction(RabbitMqOptions);\r\n                    \r\n                    cfg.AddConsumers(\r\n                        filter: type => type.IsAssignableTo(typeof(IConsumer)),\r\n                        assemblies: typeof(ICommand).Assembly);\r\n\r\n                    cfg.SetKebabCaseEndpointNameFormatter();\r\n                    cfg.AddCommandEndpointsConvention();\r\n\r\n                    cfg.UsingRabbitMq((context, bus) =>\r\n                    {\r\n                        bus.Host(\r\n                            host: RabbitMqOptions.Host,\r\n                            configure: host =>\r\n                            {\r\n                                host.Username(RabbitMqOptions.Username);\r\n                                host.Password(RabbitMqOptions.Password);\r\n                            });\r\n\r\n                        bus.ConfigureEventReceiveEndpoints(context);\r\n                        bus.ConfigureEndpoints(context);\r\n                    });\r\n                })\r\n                .AddGenericRequestClient()\r\n                .AddMassTransitHostedService();\r\n\r\n        private static void ConfigureEventReceiveEndpoints(this IRabbitMqBusFactoryConfigurator cfg, IRegistration context)\r\n        {\r\n            cfg.ConfigureEventReceiveEndpoint<Events.CustomerRegistered, CustomerRegisteredConsumer>(context);\r\n            cfg.ConfigureEventReceiveEndpoint<Events.CustomerAgeChanged, CustomerUpdatedConsumer>(context);\r\n            cfg.ConfigureEventReceiveEndpoint<Events.CustomerNameChanged, CustomerUpdatedConsumer>(context);\r\n            cfg.ConfigureEventReceiveEndpoint<Events.CustomerDeleted, CustomerDeletedConsumer>(context);\r\n        }\r\n\r\n        private static void AddCommandEndpointsConvention(this IServiceCollectionBusConfigurator _)\r\n        {\r\n            MapQueueEndpoint<RegisterCustomer>();\r\n            MapQueueEndpoint<UpdateCustomer>();\r\n            MapQueueEndpoint<DeleteCustomer>();\r\n        }\r\n\r\n        private static void ConfigureEventReceiveEndpoint<TMessage, TConsumer>(this IRabbitMqBusFactoryConfigurator cfg, IRegistration registration)\r\n            where TMessage : IDomainEvent\r\n            where TConsumer : class, IConsumer\r\n            => cfg.ReceiveEndpoint(\r\n                queueName: typeof(TMessage).ToKebabCaseString(),\r\n                configureEndpoint: endpoint => endpoint.ConfigureConsumer<TConsumer>(registration));\r\n\r\n        private static void MapQueueEndpoint<TMessage>()\r\n            where TMessage : class\r\n            => EndpointConvention.Map<TMessage>(new Uri($\"queue:{typeof(TMessage).ToKebabCaseString()}\"));\r\n\r\n        private static string ToKebabCaseString(this MemberInfo member)\r\n            => KebabCaseEndpointNameFormatter.Instance.SanitizeName(member.Name);\r\n\r\n        public static IServiceCollection AddApplicationServices(this IServiceCollection services)\r\n            => services\r\n                .AddScoped<ICustomerEventStoreService, CustomerEventStoreService>()\r\n                .AddScoped<ICustomerProjectionsService, CustomerProjectionsService>();\r\n\r\n        public static IServiceCollection AddEventStoreDbContext(this IServiceCollection services)\r\n            => services\r\n                .AddScoped<DbContext, EventStoreDbContext>()\r\n                .AddDbContext<EventStoreDbContext>();\r\n\r\n        public static IServiceCollection AddProjectionsDbContext(this IServiceCollection services)\r\n        {\r\n            BsonSerializer.RegisterSerializer(new GuidSerializer(GuidRepresentation.CSharpLegacy));\r\n            return services.AddScoped<IMongoDbContext, MongoDbContext>();\r\n        }\r\n\r\n        public static IServiceCollection AddEventStoreRepositories(this IServiceCollection services)\r\n            => services.AddScoped<ICustomerEventStoreRepository, CustomerEventStoreRepository>();\r\n\r\n        public static IServiceCollection AddProjectionsRepositories(this IServiceCollection services)\r\n            => services.AddScoped<ICustomerProjectionsRepository, CustomerProjectionsRepository>();\r\n\r\n        public static OptionsBuilder<SqlServerRetryingOptions> ConfigureSqlServerRetryingOptions(this IServiceCollection services, IConfigurationSection section)\r\n            => services\r\n                .AddOptions<SqlServerRetryingOptions>()\r\n                .Bind(section)\r\n                .ValidateDataAnnotations()\r\n                .ValidateOnStart();\r\n\r\n        public static OptionsBuilder<MongoDbOptions> ConfigureMongoDbOptions(this IServiceCollection services, IConfigurationSection section)\r\n            => services\r\n                .AddOptions<MongoDbOptions>()\r\n                .Bind(section)\r\n                .ValidateDataAnnotations()\r\n                .ValidateOnStart();\r\n\r\n        public static OptionsBuilder<EventStoreOptions> ConfigureEventStoreOptions(this IServiceCollection services, IConfigurationSection section)\r\n            => services\r\n                .AddOptions<EventStoreOptions>()\r\n                .Bind(section)\r\n                .ValidateDataAnnotations()\r\n                .ValidateOnStart();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Infrastructure/DependencyInjection/Extensions/ServiceCollectionExtensions.cs b/src/Infrastructure/DependencyInjection/Extensions/ServiceCollectionExtensions.cs
--- a/src/Infrastructure/DependencyInjection/Extensions/ServiceCollectionExtensions.cs	(revision 2def3e0ac165f0081b3f96a6abbfc32272b1dcc5)
+++ b/src/Infrastructure/DependencyInjection/Extensions/ServiceCollectionExtensions.cs	(date 1629831102480)
@@ -1,6 +1,5 @@
 using System;
 using System.Reflection;
-using Application.Abstractions.UseCases;
 using Application.EventSourcing.Customers.EventStore;
 using Application.EventSourcing.Customers.Projections;
 using Application.UseCases.Customers.Commands.DeleteCustomer;
@@ -9,8 +8,10 @@
 using Application.UseCases.Customers.EventHandlers.CustomerDeleted;
 using Application.UseCases.Customers.EventHandlers.CustomerRegistered;
 using Application.UseCases.Customers.EventHandlers.CustomerUpdated;
+using Application.UseCases.Customers.Queries.GetCustomerDetails;
+using Application.UseCases.Customers.Queries.GetCustomersWithPagination;
 using Domain.Abstractions.Events;
-using Domain.Entities.Customers;
+using Domain.Entities.Customers.Events;
 using Infrastructure.DependencyInjection.Options;
 using Infrastructure.EventSourcing.Customers.EventStore;
 using Infrastructure.EventSourcing.Customers.EventStore.Contexts;
@@ -18,8 +19,8 @@
 using Infrastructure.EventSourcing.Customers.Projections.Contexts;
 using MassTransit;
 using MassTransit.Definition;
-using MassTransit.ExtensionsDependencyInjectionIntegration;
 using MassTransit.RabbitMqTransport;
+using MassTransit.Topology;
 using Microsoft.EntityFrameworkCore;
 using Microsoft.Extensions.Configuration;
 using Microsoft.Extensions.DependencyInjection;
@@ -33,63 +34,88 @@
     public static class ServiceCollectionExtensions
     {
         private static readonly RabbitMqOptions RabbitMqOptions = new();
-        
+
         public static IServiceCollection AddMassTransitWithRabbitMq(this IServiceCollection services, Action<RabbitMqOptions> optionsAction)
             => services.AddMassTransit(cfg =>
                 {
                     optionsAction(RabbitMqOptions);
-                    
-                    cfg.AddConsumers(
-                        filter: type => type.IsAssignableTo(typeof(IConsumer)),
-                        assemblies: typeof(ICommand).Assembly);
 
                     cfg.SetKebabCaseEndpointNameFormatter();
-                    cfg.AddCommandEndpointsConvention();
+                    cfg.AddCommandConsumers();
+                    cfg.AddEventConsumers();
+
+                    // cfg.AddConsumer<GetCustomerDetailQueryConsumer>();
+                    // cfg.AddConsumer<GetCustomersDetailsWithPaginationQueryConsumer>();
 
                     cfg.UsingRabbitMq((context, bus) =>
                     {
                         bus.Host(
                             host: RabbitMqOptions.Host,
-                            configure: host =>
+                            virtualHost: RabbitMqOptions.VirtualHost,
+                            host =>
                             {
                                 host.Username(RabbitMqOptions.Username);
                                 host.Password(RabbitMqOptions.Password);
                             });
 
+                        bus.MessageTopology.SetEntityNameFormatter(new KebabCaseEntityNameFormatter());
                         bus.ConfigureEventReceiveEndpoints(context);
                         bus.ConfigureEndpoints(context);
                     });
                 })
-                .AddGenericRequestClient()
-                .AddMassTransitHostedService();
+                .AddGenericRequestClient();
+
+        private static void AddCommandConsumers(this IRegistrationConfigurator cfg)
+        {
+            cfg.AddCommandConsumer<DeleteCustomerConsumer, DeleteCustomer>();
+            cfg.AddCommandConsumer<UpdateCustomerConsumer, UpdateCustomer>();
+            cfg.AddCommandConsumer<RegisterCustomerConsumer, RegisterCustomer>();
+        }
 
-        private static void ConfigureEventReceiveEndpoints(this IRabbitMqBusFactoryConfigurator cfg, IRegistration context)
+        private static void AddEventConsumers(this IRegistrationConfigurator cfg)
         {
-            cfg.ConfigureEventReceiveEndpoint<Events.CustomerRegistered, CustomerRegisteredConsumer>(context);
-            cfg.ConfigureEventReceiveEndpoint<Events.CustomerAgeChanged, CustomerUpdatedConsumer>(context);
-            cfg.ConfigureEventReceiveEndpoint<Events.CustomerNameChanged, CustomerUpdatedConsumer>(context);
-            cfg.ConfigureEventReceiveEndpoint<Events.CustomerDeleted, CustomerDeletedConsumer>(context);
+            cfg.AddConsumer<CustomerRegisteredConsumer>();
+            cfg.AddConsumer<CustomerDeletedConsumer>();
+            cfg.AddConsumer<CustomerUpdatedConsumer>();
         }
 
-        private static void AddCommandEndpointsConvention(this IServiceCollectionBusConfigurator _)
+        private static void ConfigureEventReceiveEndpoints(this IRabbitMqBusFactoryConfigurator cfg, IRegistration registration)
         {
-            MapQueueEndpoint<RegisterCustomer>();
-            MapQueueEndpoint<UpdateCustomer>();
-            MapQueueEndpoint<DeleteCustomer>();
+            cfg.ConfigureEventReceiveEndpoint<CustomerRegisteredConsumer, CustomerRegistered>(registration);
+            cfg.ConfigureEventReceiveEndpoint<CustomerUpdatedConsumer, CustomerAgeChanged>(registration);
+            cfg.ConfigureEventReceiveEndpoint<CustomerUpdatedConsumer, CustomerNameChanged>(registration);
+            cfg.ConfigureEventReceiveEndpoint<CustomerDeletedConsumer, CustomerDeleted>(registration);
         }
 
-        private static void ConfigureEventReceiveEndpoint<TMessage, TConsumer>(this IRabbitMqBusFactoryConfigurator cfg, IRegistration registration)
-            where TMessage : IDomainEvent
+        private static void AddCommandConsumer<TConsumer, TMessage>(this IRegistrationConfigurator configurator)
+            where TConsumer : class, IConsumer
+            where TMessage : class
+        {
+            configurator
+                .AddConsumer<TConsumer>()
+                .Endpoint(e => e.ConfigureConsumeTopology = false);
+
+            MapQueueEndpoint<TMessage>();
+        }
+
+        private static void ConfigureEventReceiveEndpoint<TConsumer, TMessage>(this IRabbitMqBusFactoryConfigurator cfg, IRegistration registration)
             where TConsumer : class, IConsumer
-            => cfg.ReceiveEndpoint(
+            where TMessage : class, IDomainEvent
+        {
+            cfg.ReceiveEndpoint(
                 queueName: typeof(TMessage).ToKebabCaseString(),
-                configureEndpoint: endpoint => endpoint.ConfigureConsumer<TConsumer>(registration));
+                configureEndpoint: endpoint =>
+                {
+                    endpoint.ConfigureConsumer<TConsumer>(registration);
+                    endpoint.ConfigureConsumeTopology = false;
+                });
+        }
 
         private static void MapQueueEndpoint<TMessage>()
             where TMessage : class
-            => EndpointConvention.Map<TMessage>(new Uri($"queue:{typeof(TMessage).ToKebabCaseString()}"));
+            => EndpointConvention.Map<TMessage>(new Uri($"exchange:{typeof(TMessage).ToKebabCaseString()}"));
 
-        private static string ToKebabCaseString(this MemberInfo member)
+        internal static string ToKebabCaseString(this MemberInfo member)
             => KebabCaseEndpointNameFormatter.Instance.SanitizeName(member.Name);
 
         public static IServiceCollection AddApplicationServices(this IServiceCollection services)
@@ -135,4 +161,10 @@
                 .ValidateDataAnnotations()
                 .ValidateOnStart();
     }
+
+    internal class KebabCaseEntityNameFormatter : IEntityNameFormatter
+    {
+        public string FormatEntityName<T>()
+            => typeof(T).ToKebabCaseString();
+    }
 }
\ No newline at end of file
Index: src/Infrastructure/Abstractions/EventSourcing/EventStore/EventStoreService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing Application.Abstractions.EventSourcing.EventStore;\r\nusing Application.Abstractions.EventSourcing.EventStore.Events;\r\nusing Domain.Abstractions.Aggregates;\r\nusing Domain.Abstractions.Events;\r\nusing Infrastructure.DependencyInjection.Options;\r\nusing MassTransit;\r\nusing Microsoft.Extensions.Options;\r\n\r\nnamespace Infrastructure.Abstractions.EventSourcing.EventStore\r\n{\r\n    public abstract class EventStoreService<TAggregateState, TStoreEvent, TSnapshot, TId> : IEventStoreService<TAggregateState, TId>\r\n        where TAggregateState : IAggregateRoot<TId>, new()\r\n        where TStoreEvent : StoreEvent<TAggregateState, TId>, new()\r\n        where TSnapshot : Snapshot<TAggregateState, TId>, new()\r\n        where TId : struct\r\n    {\r\n        private readonly IEventStoreRepository<TAggregateState, TStoreEvent, TSnapshot, TId> _repository;\r\n        private readonly IBus _bus;\r\n        private readonly EventStoreOptions _options;\r\n\r\n        protected EventStoreService(IOptionsMonitor<EventStoreOptions> optionsMonitor, IEventStoreRepository<TAggregateState, TStoreEvent, TSnapshot, TId> repository, IBus bus)\r\n        {\r\n            _repository = repository;\r\n            _bus = bus;\r\n            _options = optionsMonitor.CurrentValue;\r\n        }\r\n\r\n        public async Task AppendEventsToStreamAsync(TAggregateState aggregateState, CancellationToken cancellationToken)\r\n        {\r\n            var eventsToStore = GetEventsToStore(aggregateState);\r\n\r\n            await foreach (var version in AppendEventToStreamAsync(eventsToStore, cancellationToken))\r\n                if (version % _options.SnapshotInterval is 0)\r\n                    await AppendSnapshotToStreamAsync(aggregateState, version, cancellationToken);\r\n\r\n            await PublishEventsAsync(aggregateState.DomainEvents, cancellationToken);\r\n        }\r\n\r\n        private async IAsyncEnumerable<int> AppendEventToStreamAsync(IEnumerable<TStoreEvent> storeEvents, [EnumeratorCancellation] CancellationToken cancellationToken)\r\n        {\r\n            foreach (var storeEvent in storeEvents)\r\n                yield return await _repository.AppendEventToStreamAsync(storeEvent, cancellationToken);\r\n        }\r\n\r\n        private async Task AppendSnapshotToStreamAsync(TAggregateState aggregateState, int aggregateVersion, CancellationToken cancellationToken)\r\n        {\r\n            var snapshot = new TSnapshot\r\n            {\r\n                AggregateId = aggregateState.Id,\r\n                AggregateState = aggregateState,\r\n                AggregateVersion = aggregateVersion\r\n            };\r\n\r\n            await _repository.AppendSnapshotToStreamAsync(snapshot, cancellationToken);\r\n        }\r\n\r\n        public async Task<TAggregateState> LoadAggregateFromStreamAsync(TId aggregateId, CancellationToken cancellationToken)\r\n        {\r\n            var snapshot = await _repository.GetSnapshotAsync(aggregateId, cancellationToken) ?? new TSnapshot();\r\n            var events = await _repository.GetStreamAsync(aggregateId, snapshot.AggregateVersion, cancellationToken);\r\n            snapshot.AggregateState.LoadEvents(events);\r\n            return snapshot.AggregateState;\r\n        }\r\n\r\n        private Task PublishEventsAsync(IEnumerable<IDomainEvent> domainEvents, CancellationToken cancellationToken)\r\n            => Task.WhenAll(domainEvents.Select(domainEvent => _bus.Publish(domainEvent, domainEvent.GetType(), cancellationToken)));\r\n\r\n        private static IEnumerable<TStoreEvent> GetEventsToStore(TAggregateState aggregateState)\r\n            => aggregateState.DomainEvents.Select(domainEvent\r\n                => new TStoreEvent\r\n                {\r\n                    AggregateId = aggregateState.Id,\r\n                    DomainEvent = domainEvent,\r\n                    DomainEventName = domainEvent.GetType().Name\r\n                });\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Infrastructure/Abstractions/EventSourcing/EventStore/EventStoreService.cs b/src/Infrastructure/Abstractions/EventSourcing/EventStore/EventStoreService.cs
--- a/src/Infrastructure/Abstractions/EventSourcing/EventStore/EventStoreService.cs	(revision 2def3e0ac165f0081b3f96a6abbfc32272b1dcc5)
+++ b/src/Infrastructure/Abstractions/EventSourcing/EventStore/EventStoreService.cs	(date 1628972203052)
@@ -7,6 +7,7 @@
 using Application.Abstractions.EventSourcing.EventStore.Events;
 using Domain.Abstractions.Aggregates;
 using Domain.Abstractions.Events;
+using Domain.Entities.Customers.Events;
 using Infrastructure.DependencyInjection.Options;
 using MassTransit;
 using Microsoft.Extensions.Options;
Index: src/Domain/Entities/Customers/Events.cs
===================================================================
diff --git a/src/Domain/Entities/Customers/Events.cs b/src/Domain/Entities/Customers/Events.cs
deleted file mode 100644
--- a/src/Domain/Entities/Customers/Events.cs	(revision 2def3e0ac165f0081b3f96a6abbfc32272b1dcc5)
+++ /dev/null	(revision 2def3e0ac165f0081b3f96a6abbfc32272b1dcc5)
@@ -1,16 +0,0 @@
-using System;
-using Domain.Abstractions.Events;
-
-namespace Domain.Entities.Customers
-{
-    public static class Events
-    {
-        public record CustomerAgeChanged(int Age) : DomainEvent;
-
-        public record CustomerNameChanged(string Name) : DomainEvent;
-        
-        public record CustomerDeleted(Guid Id) : DomainEvent;
-
-        public record CustomerRegistered(Guid Id, string Name, int Age) : DomainEvent;
-    }
-}
\ No newline at end of file
Index: src/Domain/Entities/Customers/Events/CustomerDeleted.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Domain/Entities/Customers/Events/CustomerDeleted.cs b/src/Domain/Entities/Customers/Events/CustomerDeleted.cs
new file mode 100644
--- /dev/null	(date 1628962771250)
+++ b/src/Domain/Entities/Customers/Events/CustomerDeleted.cs	(date 1628962771250)
@@ -0,0 +1,7 @@
+using System;
+using Domain.Abstractions.Events;
+
+namespace Domain.Entities.Customers.Events
+{
+    public record CustomerDeleted(Guid Id) : DomainEvent;
+}
\ No newline at end of file
Index: src/WorkerService1/Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WorkerService1/Program.cs b/src/WorkerService1/Program.cs
new file mode 100644
--- /dev/null	(date 1629385907424)
+++ b/src/WorkerService1/Program.cs	(date 1629385907424)
@@ -0,0 +1,9 @@
+using Microsoft.Extensions.DependencyInjection;
+using Microsoft.Extensions.Hosting;
+using WorkerService1;
+
+IHost host = Host.CreateDefaultBuilder(args)
+    .ConfigureServices(services => { services.AddHostedService<Worker>(); })
+    .Build();
+
+await host.RunAsync();
\ No newline at end of file
Index: src/Application/UseCases/Customers/EventHandlers/CustomerUpdated/CustomerUpdatedConsumer.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Application/UseCases/Customers/EventHandlers/CustomerUpdated/CustomerUpdatedConsumer.cs b/src/Application/UseCases/Customers/EventHandlers/CustomerUpdated/CustomerUpdatedConsumer.cs
new file mode 100644
--- /dev/null	(date 1628962771271)
+++ b/src/Application/UseCases/Customers/EventHandlers/CustomerUpdated/CustomerUpdatedConsumer.cs	(date 1628962771271)
@@ -0,0 +1,22 @@
+using System;
+using System.Threading.Tasks;
+using Domain.Entities.Customers.Events;
+using MassTransit;
+
+namespace Application.UseCases.Customers.EventHandlers.CustomerUpdated
+{
+    public class CustomerUpdatedConsumer : IConsumer<CustomerAgeChanged>, IConsumer<CustomerNameChanged>
+    {
+        public Task Consume(ConsumeContext<CustomerAgeChanged> context)
+        {
+            Console.WriteLine(context.Message);
+            return Task.CompletedTask;
+        }
+
+        public Task Consume(ConsumeContext<CustomerNameChanged> context)
+        {
+            Console.WriteLine(context.Message);
+            return Task.CompletedTask;
+        }
+    }
+}
\ No newline at end of file
Index: src/WorkerService1/appsettings.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WorkerService1/appsettings.json b/src/WorkerService1/appsettings.json
new file mode 100644
--- /dev/null	(date 1629385743437)
+++ b/src/WorkerService1/appsettings.json	(date 1629385743437)
@@ -0,0 +1,9 @@
+{
+  "Logging": {
+    "LogLevel": {
+      "Default": "Information",
+      "Microsoft": "Warning",
+      "Microsoft.Hosting.Lifetime": "Information"
+    }
+  }
+}
Index: Dotnet6.CleanArch.CQRS.EventSourcing.sln
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"src\", \"src\", \"{9922CBF1-65ED-46A2-A964-085B906C5837}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Domain\", \"src\\Domain\\Domain.csproj\", \"{FC26EC36-6E6C-4F97-8CD3-58F450C5C9B3}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Application\", \"src\\Application\\Application.csproj\", \"{A4FC0409-EE47-47DD-B43A-B7774E8A114C}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"Infrastructure\", \"src\\Infrastructure\\Infrastructure.csproj\", \"{34AC7267-5C7E-455E-8A00-356150BAFB98}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"WebAPI\", \"src\\WebAPI\\WebAPI.csproj\", \"{BEB647B2-BFC1-4F4F-A986-075D489984B7}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(NestedProjects) = preSolution\r\n\t\t{FC26EC36-6E6C-4F97-8CD3-58F450C5C9B3} = {9922CBF1-65ED-46A2-A964-085B906C5837}\r\n\t\t{A4FC0409-EE47-47DD-B43A-B7774E8A114C} = {9922CBF1-65ED-46A2-A964-085B906C5837}\r\n\t\t{34AC7267-5C7E-455E-8A00-356150BAFB98} = {9922CBF1-65ED-46A2-A964-085B906C5837}\r\n\t\t{BEB647B2-BFC1-4F4F-A986-075D489984B7} = {9922CBF1-65ED-46A2-A964-085B906C5837}\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{FC26EC36-6E6C-4F97-8CD3-58F450C5C9B3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{FC26EC36-6E6C-4F97-8CD3-58F450C5C9B3}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{FC26EC36-6E6C-4F97-8CD3-58F450C5C9B3}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{FC26EC36-6E6C-4F97-8CD3-58F450C5C9B3}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{A4FC0409-EE47-47DD-B43A-B7774E8A114C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{A4FC0409-EE47-47DD-B43A-B7774E8A114C}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{A4FC0409-EE47-47DD-B43A-B7774E8A114C}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{A4FC0409-EE47-47DD-B43A-B7774E8A114C}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{34AC7267-5C7E-455E-8A00-356150BAFB98}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{34AC7267-5C7E-455E-8A00-356150BAFB98}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{34AC7267-5C7E-455E-8A00-356150BAFB98}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{34AC7267-5C7E-455E-8A00-356150BAFB98}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{BEB647B2-BFC1-4F4F-A986-075D489984B7}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{BEB647B2-BFC1-4F4F-A986-075D489984B7}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{BEB647B2-BFC1-4F4F-A986-075D489984B7}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{BEB647B2-BFC1-4F4F-A986-075D489984B7}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\nEndGlobal\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Dotnet6.CleanArch.CQRS.EventSourcing.sln b/Dotnet6.CleanArch.CQRS.EventSourcing.sln
--- a/Dotnet6.CleanArch.CQRS.EventSourcing.sln	(revision 2def3e0ac165f0081b3f96a6abbfc32272b1dcc5)
+++ b/Dotnet6.CleanArch.CQRS.EventSourcing.sln	(date 1629385944720)
@@ -10,6 +10,8 @@
 EndProject
 Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "WebAPI", "src\WebAPI\WebAPI.csproj", "{BEB647B2-BFC1-4F4F-A986-075D489984B7}"
 EndProject
+Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "WorkerService", "src\WorkerService\WorkerService.csproj", "{F1AF7077-38D0-4501-94FA-8D22546B1EDE}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
@@ -20,6 +22,7 @@
 		{A4FC0409-EE47-47DD-B43A-B7774E8A114C} = {9922CBF1-65ED-46A2-A964-085B906C5837}
 		{34AC7267-5C7E-455E-8A00-356150BAFB98} = {9922CBF1-65ED-46A2-A964-085B906C5837}
 		{BEB647B2-BFC1-4F4F-A986-075D489984B7} = {9922CBF1-65ED-46A2-A964-085B906C5837}
+		{F1AF7077-38D0-4501-94FA-8D22546B1EDE} = {9922CBF1-65ED-46A2-A964-085B906C5837}
 	EndGlobalSection
 	GlobalSection(ProjectConfigurationPlatforms) = postSolution
 		{FC26EC36-6E6C-4F97-8CD3-58F450C5C9B3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
@@ -38,5 +41,9 @@
 		{BEB647B2-BFC1-4F4F-A986-075D489984B7}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{BEB647B2-BFC1-4F4F-A986-075D489984B7}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{BEB647B2-BFC1-4F4F-A986-075D489984B7}.Release|Any CPU.Build.0 = Release|Any CPU
+		{F1AF7077-38D0-4501-94FA-8D22546B1EDE}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{F1AF7077-38D0-4501-94FA-8D22546B1EDE}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{F1AF7077-38D0-4501-94FA-8D22546B1EDE}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{F1AF7077-38D0-4501-94FA-8D22546B1EDE}.Release|Any CPU.Build.0 = Release|Any CPU
 	EndGlobalSection
 EndGlobal
Index: src/WorkerService1/appsettings.Development.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WorkerService1/appsettings.Development.json b/src/WorkerService1/appsettings.Development.json
new file mode 100644
--- /dev/null	(date 1629385743450)
+++ b/src/WorkerService1/appsettings.Development.json	(date 1629385743450)
@@ -0,0 +1,9 @@
+{
+  "Logging": {
+    "LogLevel": {
+      "Default": "Information",
+      "Microsoft": "Warning",
+      "Microsoft.Hosting.Lifetime": "Information"
+    }
+  }
+}
Index: src/WorkerService1/WorkerService1.csproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WorkerService1/WorkerService1.csproj b/src/WorkerService1/WorkerService1.csproj
new file mode 100644
--- /dev/null	(date 1629385744926)
+++ b/src/WorkerService1/WorkerService1.csproj	(date 1629385744926)
@@ -0,0 +1,13 @@
+<Project Sdk="Microsoft.NET.Sdk.Worker">
+
+    <PropertyGroup>
+        <TargetFramework>net6.0</TargetFramework>
+        <Nullable>enable</Nullable>
+        <UserSecretsId>dotnet-WorkerService1-0734D65B-F4A7-497A-8826-E3E89D4C9E95</UserSecretsId>
+        <DockerDefaultTargetOS>Linux</DockerDefaultTargetOS>
+    </PropertyGroup>
+
+    <ItemGroup>
+        <PackageReference Include="Microsoft.Extensions.Hosting" Version="6.0.0-preview.7.21377.19" />
+    </ItemGroup>
+</Project>
Index: src/Application/UseCases/Customers/Commands/DeleteCustomer/DeleteCustomer.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Application/UseCases/Customers/Commands/DeleteCustomer/DeleteCustomer.cs b/src/Application/UseCases/Customers/Commands/DeleteCustomer/DeleteCustomer.cs
new file mode 100644
--- /dev/null	(date 1628892225279)
+++ b/src/Application/UseCases/Customers/Commands/DeleteCustomer/DeleteCustomer.cs	(date 1628892225279)
@@ -0,0 +1,28 @@
+using System;
+using System.Collections.Generic;
+using System.Threading.Tasks;
+using Application.Abstractions.UseCases;
+using GreenPipes;
+using MassTransit;
+using MassTransit.Definition;
+
+namespace Application.UseCases.Customers.Commands.DeleteCustomer
+{
+    public record DeleteCustomer(Guid Id) : ICommand;
+    
+    public class DeleteCustomerConsumer : IConsumer<DeleteCustomer>
+    {
+        public Task Consume(ConsumeContext<DeleteCustomer> context)
+            => throw new System.NotImplementedException();
+    }
+    
+    public class MyFilterValidation<T> : IPipeSpecification<T> where T : class, PipeContext
+    {
+        public void Apply(IPipeBuilder<T> builder)
+        {
+            throw new NotImplementedException();
+        }
+
+        public IEnumerable<ValidationResult> Validate() => throw new NotImplementedException();
+    }
+}
\ No newline at end of file
Index: src/WorkerService1/Worker.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WorkerService1/Worker.cs b/src/WorkerService1/Worker.cs
new file mode 100644
--- /dev/null	(date 1629385907411)
+++ b/src/WorkerService1/Worker.cs	(date 1629385907411)
@@ -0,0 +1,34 @@
+using System;
+using System.Threading;
+using System.Threading.Tasks;
+using Microsoft.Extensions.Hosting;
+using Microsoft.Extensions.Logging;
+
+namespace WorkerService1
+{
+    public class Worker : BackgroundService
+    {
+        private readonly ILogger<Worker> _logger;
+
+        public Worker(ILogger<Worker> logger)
+        {
+            _logger = logger;
+        }
+
+        protected override async Task ExecuteAsync(CancellationToken stoppingToken)
+        {
+            while (!stoppingToken.IsCancellationRequested)
+            {
+                _logger.LogInformation("Worker running at: {time}", DateTimeOffset.Now);
+                try
+                {
+                    await Task.Delay(1000, stoppingToken);
+                }
+                catch (OperationCanceledException)
+                {
+                    return;
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
Index: src/WorkerService1/.dockerignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WorkerService1/.dockerignore b/src/WorkerService1/.dockerignore
new file mode 100644
--- /dev/null	(date 1629385744869)
+++ b/src/WorkerService1/.dockerignore	(date 1629385744869)
@@ -0,0 +1,25 @@
+**/.dockerignore
+**/.env
+**/.git
+**/.gitignore
+**/.project
+**/.settings
+**/.toolstarget
+**/.vs
+**/.vscode
+**/.idea
+**/*.*proj.user
+**/*.dbmdl
+**/*.jfm
+**/azds.yaml
+**/bin
+**/charts
+**/docker-compose*
+**/Dockerfile*
+**/node_modules
+**/npm-debug.log
+**/obj
+**/secrets.dev.yaml
+**/values.dev.yaml
+LICENSE
+README.md
\ No newline at end of file
Index: src/WorkerService1/Properties/launchSettings.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WorkerService1/Properties/launchSettings.json b/src/WorkerService1/Properties/launchSettings.json
new file mode 100644
--- /dev/null	(date 1629385743428)
+++ b/src/WorkerService1/Properties/launchSettings.json	(date 1629385743428)
@@ -0,0 +1,11 @@
+{
+  "profiles": {
+    "WorkerService1": {
+      "commandName": "Project",
+      "dotnetRunMessages": true,
+      "environmentVariables": {
+        "DOTNET_ENVIRONMENT": "Development"
+      }
+    }
+  }
+}
Index: src/WorkerService1/Dockerfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WorkerService1/Dockerfile b/src/WorkerService1/Dockerfile
new file mode 100644
--- /dev/null	(date 1629385744854)
+++ b/src/WorkerService1/Dockerfile	(date 1629385744854)
@@ -0,0 +1,18 @@
+FROM mcr.microsoft.com/dotnet/runtime:6.0 AS base
+WORKDIR /app
+
+FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build
+WORKDIR /src
+COPY ["src/WorkerService1/WorkerService1.csproj", "WorkerService1/"]
+RUN dotnet restore "src/WorkerService1/WorkerService1.csproj"
+COPY . .
+WORKDIR "/src/WorkerService1"
+RUN dotnet build "WorkerService1.csproj" -c Release -o /app/build
+
+FROM build AS publish
+RUN dotnet publish "WorkerService1.csproj" -c Release -o /app/publish
+
+FROM base AS final
+WORKDIR /app
+COPY --from=publish /app/publish .
+ENTRYPOINT ["dotnet", "WorkerService1.dll"]
Index: src/Domain/Domain.csproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><Project Sdk=\"Microsoft.NET.Sdk\">\r\n    <ItemGroup>\r\n        <PackageReference Include=\"FluentValidation\" Version=\"10.3.0\" />\r\n        <PackageReference Include=\"Newtonsoft.Json\" Version=\"13.0.1\" />\r\n    </ItemGroup>\r\n</Project>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Domain/Domain.csproj b/src/Domain/Domain.csproj
--- a/src/Domain/Domain.csproj	(revision 2def3e0ac165f0081b3f96a6abbfc32272b1dcc5)
+++ b/src/Domain/Domain.csproj	(date 1628971297453)
@@ -1,6 +1,7 @@
 <Project Sdk="Microsoft.NET.Sdk">
     <ItemGroup>
         <PackageReference Include="FluentValidation" Version="10.3.0" />
+        <PackageReference Include="MassTransit" Version="7.2.2-develop.197" />
         <PackageReference Include="Newtonsoft.Json" Version="13.0.1" />
     </ItemGroup>
 </Project>
Index: src/Application/UseCases/Customers/EventHandlers/CustomerDeleted/CustomerDeletedConsumer.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Threading.Tasks;\r\nusing Domain.Entities.Customers;\r\nusing MassTransit;\r\n\r\nnamespace Application.UseCases.Customers.EventHandlers.CustomerDeleted\r\n{\r\n    public class CustomerDeletedConsumer : IConsumer<Events.CustomerDeleted>\r\n    {\r\n        public async Task Consume(ConsumeContext<Events.CustomerDeleted> context)\r\n        {\r\n            var id = context.Message;\r\n            await Task.CompletedTask;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Application/UseCases/Customers/EventHandlers/CustomerDeleted/CustomerDeletedConsumer.cs b/src/Application/UseCases/Customers/EventHandlers/CustomerDeleted/CustomerDeletedConsumer.cs
--- a/src/Application/UseCases/Customers/EventHandlers/CustomerDeleted/CustomerDeletedConsumer.cs	(revision 2def3e0ac165f0081b3f96a6abbfc32272b1dcc5)
+++ b/src/Application/UseCases/Customers/EventHandlers/CustomerDeleted/CustomerDeletedConsumer.cs	(date 1628962771296)
@@ -1,12 +1,11 @@
 using System.Threading.Tasks;
-using Domain.Entities.Customers;
 using MassTransit;
 
 namespace Application.UseCases.Customers.EventHandlers.CustomerDeleted
 {
-    public class CustomerDeletedConsumer : IConsumer<Events.CustomerDeleted>
+    public class CustomerDeletedConsumer : IConsumer<Domain.Entities.Customers.Events.CustomerDeleted>
     {
-        public async Task Consume(ConsumeContext<Events.CustomerDeleted> context)
+        public async Task Consume(ConsumeContext<Domain.Entities.Customers.Events.CustomerDeleted> context)
         {
             var id = context.Message;
             await Task.CompletedTask;
Index: src/Domain/Entities/Customers/Events/CustomerRegistered.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Domain/Entities/Customers/Events/CustomerRegistered.cs b/src/Domain/Entities/Customers/Events/CustomerRegistered.cs
new file mode 100644
--- /dev/null	(date 1628972065795)
+++ b/src/Domain/Entities/Customers/Events/CustomerRegistered.cs	(date 1628972065795)
@@ -0,0 +1,7 @@
+using System;
+using Domain.Abstractions.Events;
+
+namespace Domain.Entities.Customers.Events
+{
+    public record CustomerRegistered(Guid Id, string Name, int Age) : DomainEvent;
+}
\ No newline at end of file
Index: src/Application/UseCases/Customers/Queries/GetCustomersWithPagination/GetCustomersDetailsWithPaginationQuery.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Threading.Tasks;\r\nusing Application.Abstractions.UseCases;\r\nusing Application.EventSourcing.Customers.Projections;\r\nusing MassTransit;\r\n\r\nnamespace Application.UseCases.Customers.Queries.GetCustomersWithPagination\r\n{\r\n    public record GetCustomersDetailsWithPaginationQuery(int Limit, int Offset) : IQueryPaging;\r\n\r\n    public class GetCustomersDetailsWithPaginationQueryConsumer : IConsumer<GetCustomersDetailsWithPaginationQuery>\r\n    {\r\n        private readonly ICustomerProjectionsService _projectionsService;\r\n\r\n        public GetCustomersDetailsWithPaginationQueryConsumer(ICustomerProjectionsService projectionsService)\r\n        {\r\n            _projectionsService = projectionsService;\r\n        }\r\n\r\n        public async Task Consume(ConsumeContext<GetCustomersDetailsWithPaginationQuery> context)\r\n        {\r\n            var paginatedResult = await _projectionsService.GetCustomersDetailsWithPaginationAsync(\r\n                paging: context.Message, \r\n                predicate: _ => true, \r\n                cancellationToken: context.CancellationToken);\r\n            \r\n            await context.RespondAsync(paginatedResult);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Application/UseCases/Customers/Queries/GetCustomersWithPagination/GetCustomersDetailsWithPaginationQuery.cs b/src/Application/UseCases/Customers/Queries/GetCustomersWithPagination/GetCustomersDetailsWithPaginationQuery.cs
--- a/src/Application/UseCases/Customers/Queries/GetCustomersWithPagination/GetCustomersDetailsWithPaginationQuery.cs	(revision 2def3e0ac165f0081b3f96a6abbfc32272b1dcc5)
+++ b/src/Application/UseCases/Customers/Queries/GetCustomersWithPagination/GetCustomersDetailsWithPaginationQuery.cs	(date 1629067422299)
@@ -5,7 +5,26 @@
 
 namespace Application.UseCases.Customers.Queries.GetCustomersWithPagination
 {
-    public record GetCustomersDetailsWithPaginationQuery(int Limit, int Offset) : IQueryPaging;
+    public record GetCustomersDetailsWithPaginationQuery : IQueryPaging
+    {
+        public GetCustomersDetailsWithPaginationQuery()
+        {
+            
+        }
+        
+        public GetCustomersDetailsWithPaginationQuery(int Limit, int Offset)
+        {
+            this.Limit = Limit;
+            this.Offset = Offset;
+        }
+        public int Limit { get; init; }
+        public int Offset { get; init; }
+        public void Deconstruct(out int Limit, out int Offset)
+        {
+            Limit = this.Limit;
+            Offset = this.Offset;
+        }
+    }
 
     public class GetCustomersDetailsWithPaginationQueryConsumer : IConsumer<GetCustomersDetailsWithPaginationQuery>
     {
Index: src/WebAPI/Properties/launchSettings.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"$schema\": \"https://json.schemastore.org/launchsettings.json\",\r\n  \"iisSettings\": {\r\n    \"windowsAuthentication\": false,\r\n    \"anonymousAuthentication\": true,\r\n    \"iisExpress\": {\r\n      \"applicationUrl\": \"http://localhost:53819\",\r\n      \"sslPort\": 44381\r\n    }\r\n  },\r\n  \"profiles\": {\r\n    \"WebAPI\": {\r\n      \"commandName\": \"Project\",\r\n      \"dotnetRunMessages\": true,\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"swagger\",\r\n      \"applicationUrl\": \"https://localhost:5001;http://localhost:5000\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n    \"IIS Express\": {\r\n      \"commandName\": \"IISExpress\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"swagger\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WebAPI/Properties/launchSettings.json b/src/WebAPI/Properties/launchSettings.json
--- a/src/WebAPI/Properties/launchSettings.json	(revision 2def3e0ac165f0081b3f96a6abbfc32272b1dcc5)
+++ b/src/WebAPI/Properties/launchSettings.json	(date 1629124981611)
@@ -14,7 +14,7 @@
       "dotnetRunMessages": true,
       "launchBrowser": true,
       "launchUrl": "swagger",
-      "applicationUrl": "https://localhost:5001;http://localhost:5000",
+      "applicationUrl": "https://localhost:5002;http://localhost:5003",
       "environmentVariables": {
         "ASPNETCORE_ENVIRONMENT": "Development"
       }
Index: src/WorkerService/WorkerService.csproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WorkerService/WorkerService.csproj b/src/WorkerService/WorkerService.csproj
new file mode 100644
--- /dev/null	(date 1629832992280)
+++ b/src/WorkerService/WorkerService.csproj	(date 1629832992280)
@@ -0,0 +1,12 @@
+<Project Sdk="Microsoft.NET.Sdk.Worker">
+    <ItemGroup>
+        <PackageReference Include="Microsoft.Extensions.Hosting" Version="6.0.0-preview.7.21377.19" />
+        <PackageReference Include="Microsoft.Extensions.Hosting.Abstractions" Version="6.0.0-preview.7.21377.19" />
+        <PackageReference Include="Serilog.Extensions.Hosting" Version="4.1.2" />
+        <PackageReference Include="Serilog.AspNetCore" Version="4.1.1-dev-00229" />
+    </ItemGroup>
+    <ItemGroup>
+      <ProjectReference Include="..\Application\Application.csproj" />
+      <ProjectReference Include="..\Infrastructure\Infrastructure.csproj" />
+    </ItemGroup>
+</Project>
Index: src/WorkerService/Worker.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WorkerService/Worker.cs b/src/WorkerService/Worker.cs
new file mode 100644
--- /dev/null	(date 1629829162579)
+++ b/src/WorkerService/Worker.cs	(date 1629829162579)
@@ -0,0 +1,32 @@
+using System.Threading;
+using System.Threading.Tasks;
+using MassTransit;
+using Microsoft.Extensions.Hosting;
+using Microsoft.Extensions.Logging;
+
+namespace WorkerService
+{
+    public class Worker : IHostedService
+    {
+        private readonly ILogger<Worker> _logger;
+        private readonly IBusControl _bus;
+
+        public Worker(ILogger<Worker> logger, IBusControl bus)
+        {
+            _logger = logger;
+            _bus = bus;
+        }
+
+        public async Task StartAsync(CancellationToken cancellationToken)
+        {
+            _logger.LogInformation("Starting the Bus...");
+            await _bus.StartAsync(cancellationToken);
+        }
+
+        public async Task StopAsync(CancellationToken cancellationToken)
+        {
+            _logger.LogInformation("Stopping the Bus...");
+            await _bus.StopAsync(cancellationToken);
+        }
+    }
+}
\ No newline at end of file
Index: src/WorkerService/.dockerignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WorkerService/.dockerignore b/src/WorkerService/.dockerignore
new file mode 100644
--- /dev/null	(date 1629384475314)
+++ b/src/WorkerService/.dockerignore	(date 1629384475314)
@@ -0,0 +1,25 @@
+**/.dockerignore
+**/.env
+**/.git
+**/.gitignore
+**/.project
+**/.settings
+**/.toolstarget
+**/.vs
+**/.vscode
+**/.idea
+**/*.*proj.user
+**/*.dbmdl
+**/*.jfm
+**/azds.yaml
+**/bin
+**/charts
+**/docker-compose*
+**/Dockerfile*
+**/node_modules
+**/npm-debug.log
+**/obj
+**/secrets.dev.yaml
+**/values.dev.yaml
+LICENSE
+README.md
\ No newline at end of file
Index: src/WorkerService/Properties/launchSettings.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WorkerService/Properties/launchSettings.json b/src/WorkerService/Properties/launchSettings.json
new file mode 100644
--- /dev/null	(date 1629384472380)
+++ b/src/WorkerService/Properties/launchSettings.json	(date 1629384472380)
@@ -0,0 +1,11 @@
+{
+  "profiles": {
+    "WorkerService": {
+      "commandName": "Project",
+      "dotnetRunMessages": true,
+      "environmentVariables": {
+        "DOTNET_ENVIRONMENT": "Development"
+      }
+    }
+  }
+}
Index: src/WorkerService/Dockerfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WorkerService/Dockerfile b/src/WorkerService/Dockerfile
new file mode 100644
--- /dev/null	(date 1629384475298)
+++ b/src/WorkerService/Dockerfile	(date 1629384475298)
@@ -0,0 +1,18 @@
+FROM mcr.microsoft.com/dotnet/runtime:6.0 AS base
+WORKDIR /app
+
+FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build
+WORKDIR /src
+COPY ["src/WorkerService/WorkerService.csproj", "WorkerService/"]
+RUN dotnet restore "src/WorkerService/WorkerService.csproj"
+COPY . .
+WORKDIR "/src/WorkerService"
+RUN dotnet build "WorkerService.csproj" -c Release -o /app/build
+
+FROM build AS publish
+RUN dotnet publish "WorkerService.csproj" -c Release -o /app/publish
+
+FROM base AS final
+WORKDIR /app
+COPY --from=publish /app/publish .
+ENTRYPOINT ["dotnet", "WorkerService.dll"]
Index: src/Domain/Abstractions/Events/DomainEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\n\r\nnamespace Domain.Abstractions.Events\r\n{\r\n    public abstract record DomainEvent : IDomainEvent\r\n    {\r\n        public DateTimeOffset Timestamp { get; private set; } = DateTimeOffset.Now;\r\n        public int AggregateVersion { get; set; }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Domain/Abstractions/Events/DomainEvent.cs b/src/Domain/Abstractions/Events/DomainEvent.cs
--- a/src/Domain/Abstractions/Events/DomainEvent.cs	(revision 2def3e0ac165f0081b3f96a6abbfc32272b1dcc5)
+++ b/src/Domain/Abstractions/Events/DomainEvent.cs	(date 1628971308334)
@@ -1,7 +1,9 @@
 using System;
+using MassTransit.Topology;
 
 namespace Domain.Abstractions.Events
 {
+    [ExcludeFromTopology]
     public abstract record DomainEvent : IDomainEvent
     {
         public DateTimeOffset Timestamp { get; private set; } = DateTimeOffset.Now;
Index: src/Domain/Abstractions/Events/IDomainEvent.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\n\r\nnamespace Domain.Abstractions.Events\r\n{\r\n    public interface IDomainEvent\r\n    {\r\n        DateTimeOffset Timestamp { get; }\r\n        int AggregateVersion { get; set; }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Domain/Abstractions/Events/IDomainEvent.cs b/src/Domain/Abstractions/Events/IDomainEvent.cs
--- a/src/Domain/Abstractions/Events/IDomainEvent.cs	(revision 2def3e0ac165f0081b3f96a6abbfc32272b1dcc5)
+++ b/src/Domain/Abstractions/Events/IDomainEvent.cs	(date 1628971305109)
@@ -1,7 +1,9 @@
 using System;
+using MassTransit.Topology;
 
 namespace Domain.Abstractions.Events
 {
+    [ExcludeFromTopology]
     public interface IDomainEvent
     {
         DateTimeOffset Timestamp { get; }
Index: src/Domain/Entities/Customers/Events/CustomerAgeChanged.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Domain/Entities/Customers/Events/CustomerAgeChanged.cs b/src/Domain/Entities/Customers/Events/CustomerAgeChanged.cs
new file mode 100644
--- /dev/null	(date 1628962771280)
+++ b/src/Domain/Entities/Customers/Events/CustomerAgeChanged.cs	(date 1628962771280)
@@ -0,0 +1,6 @@
+using Domain.Abstractions.Events;
+
+namespace Domain.Entities.Customers.Events
+{
+    public record CustomerAgeChanged(int Age) : DomainEvent;
+}
\ No newline at end of file
Index: src/Infrastructure/DependencyInjection/Options/RabbitMQOptions.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>namespace Infrastructure.DependencyInjection.Options\r\n{\r\n    public record RabbitMqOptions\r\n    {\r\n        public string Host { get; init; }\r\n        public string Username { get; init; }\r\n        public string Password { get; init; }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Infrastructure/DependencyInjection/Options/RabbitMQOptions.cs b/src/Infrastructure/DependencyInjection/Options/RabbitMQOptions.cs
--- a/src/Infrastructure/DependencyInjection/Options/RabbitMQOptions.cs	(revision 2def3e0ac165f0081b3f96a6abbfc32272b1dcc5)
+++ b/src/Infrastructure/DependencyInjection/Options/RabbitMQOptions.cs	(date 1629123209038)
@@ -5,5 +5,6 @@
         public string Host { get; init; }
         public string Username { get; init; }
         public string Password { get; init; }
+        public string VirtualHost { get; set; }
     }
 }
\ No newline at end of file
Index: src/WebAPI/Dockerfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base\r\nWORKDIR /app\r\nEXPOSE 80\r\nEXPOSE 443\r\n\r\nFROM mcr.microsoft.com/dotnet/sdk:6.0 AS build\r\nWORKDIR /src\r\nCOPY [\"src/WebAPI/WebAPI.csproj\", \"WebAPI/\"]\r\nRUN dotnet restore \"src/WebAPI/WebAPI.csproj\"\r\nCOPY . .\r\nWORKDIR \"/src/WebAPI\"\r\nRUN dotnet build \"WebAPI.csproj\" -c Release -o /app/build\r\n\r\nFROM build AS publish\r\nRUN dotnet publish \"WebAPI.csproj\" -c Release -o /app/publish\r\n\r\nFROM base AS final\r\nWORKDIR /app\r\nCOPY --from=publish /app/publish .\r\nENTRYPOINT [\"dotnet\", \"WebAPI.dll\"]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WebAPI/Dockerfile b/src/WebAPI/Dockerfile
--- a/src/WebAPI/Dockerfile	(revision 2def3e0ac165f0081b3f96a6abbfc32272b1dcc5)
+++ b/src/WebAPI/Dockerfile	(date 1629244523640)
@@ -1,20 +1,39 @@
-FROM mcr.microsoft.com/dotnet/aspnet:6.0 AS base
+ARG ASPNET_VERSION="6.0.0-preview.7-alpine3.13"
+ARG SDK_VERSION="6.0.100-preview.7-alpine3.13"
+ARG BASE_ADRESS="mcr.microsoft.com/dotnet"
+
+FROM $BASE_ADRESS/aspnet:$ASPNET_VERSION AS base
 WORKDIR /app
-EXPOSE 80
-EXPOSE 443
+EXPOSE 5000
 
-FROM mcr.microsoft.com/dotnet/sdk:6.0 AS build
+RUN apk add --no-cache icu-libs
+ENV DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=true
+
+FROM $BASE_ADRESS/sdk:$SDK_VERSION AS build
 WORKDIR /src
-COPY ["src/WebAPI/WebAPI.csproj", "WebAPI/"]
-RUN dotnet restore "src/WebAPI/WebAPI.csproj"
-COPY . .
-WORKDIR "/src/WebAPI"
-RUN dotnet build "WebAPI.csproj" -c Release -o /app/build
+
+COPY ./src/Application/*.csproj ./Application/
+COPY ./src/Domain/*.csproj ./Domain/
+COPY ./src/Infrastructure/*.csproj ./Infrastructure/
+COPY ./src/WebAPI/*.csproj ./WebAPI/
+
+#COPY ./NuGet.Config ./
+COPY ./Directory.Build.props ./
+
+RUN dotnet restore ./WebAPI/
+
+COPY ./src/Application/. ./Application/
+COPY ./src/Domain/. ./Domain/
+COPY ./src/Infrastructure/. ./Infrastructure/
+COPY ./src/WebAPI/. ./WebAPI/
+    
+WORKDIR /src/WebAPI
+RUN dotnet build -c Release --no-restore -o /app/build 
 
 FROM build AS publish
-RUN dotnet publish "WebAPI.csproj" -c Release -o /app/publish
+RUN dotnet publish -c Release --no-restore -o /app/publish
 
 FROM base AS final
 WORKDIR /app
 COPY --from=publish /app/publish .
-ENTRYPOINT ["dotnet", "WebAPI.dll"]
+ENTRYPOINT ["dotnet", "WebAPI.dll"]
\ No newline at end of file
Index: src/WorkerService/appsettings.Production.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WorkerService/appsettings.Production.json b/src/WorkerService/appsettings.Production.json
new file mode 100644
--- /dev/null	(date 1628258556191)
+++ b/src/WorkerService/appsettings.Production.json	(date 1628258556191)
@@ -0,0 +1,5 @@
+{
+  "ConnectionStrings": {
+    "DefaultConnection": "Server=mssql;Database=EventStore;User=sa;Password=!MyStrongPassword"
+  }
+}
\ No newline at end of file
Index: src/Application/UseCases/Customers/EventHandlers/CustomerRegistered/CustomerRegisteredConsumer.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Threading.Tasks;\r\nusing Application.EventSourcing.Customers.EventStore;\r\nusing Application.EventSourcing.Customers.Projections;\r\nusing Application.UseCases.Customers.Queries.GetCustomerDetails;\r\nusing Domain.Entities.Customers;\r\nusing MassTransit;\r\n\r\nnamespace Application.UseCases.Customers.EventHandlers.CustomerRegistered\r\n{\r\n    public class CustomerRegisteredConsumer : IConsumer<Events.CustomerRegistered>\r\n    {\r\n        private readonly ICustomerEventStoreService _eventStoreService;\r\n        private readonly ICustomerProjectionsService _projectionsService;\r\n\r\n        public CustomerRegisteredConsumer(ICustomerEventStoreService eventStoreService, ICustomerProjectionsService projectionsService)\r\n        {\r\n            _eventStoreService = eventStoreService;\r\n            _projectionsService = projectionsService;\r\n        }\r\n\r\n        public async Task Consume(ConsumeContext<Events.CustomerRegistered> context)\r\n        {\r\n            var (aggregateId, _, _) = context.Message;\r\n            \r\n            var customer = await _eventStoreService.LoadAggregateFromStreamAsync(aggregateId, context.CancellationToken);\r\n\r\n            var customerDetails = new CustomerDetailsProjection\r\n            {\r\n                Id = customer.Id,\r\n                Age = customer.Age,\r\n                Name = customer.Name\r\n            };\r\n\r\n            await _projectionsService.ProjectNewCustomerDetailsAsync(customerDetails, context.CancellationToken);\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Application/UseCases/Customers/EventHandlers/CustomerRegistered/CustomerRegisteredConsumer.cs b/src/Application/UseCases/Customers/EventHandlers/CustomerRegistered/CustomerRegisteredConsumer.cs
--- a/src/Application/UseCases/Customers/EventHandlers/CustomerRegistered/CustomerRegisteredConsumer.cs	(revision 2def3e0ac165f0081b3f96a6abbfc32272b1dcc5)
+++ b/src/Application/UseCases/Customers/EventHandlers/CustomerRegistered/CustomerRegisteredConsumer.cs	(date 1628962771257)
@@ -2,12 +2,12 @@
 using Application.EventSourcing.Customers.EventStore;
 using Application.EventSourcing.Customers.Projections;
 using Application.UseCases.Customers.Queries.GetCustomerDetails;
-using Domain.Entities.Customers;
 using MassTransit;
+using Domain.Entities.Customers.Events;
 
 namespace Application.UseCases.Customers.EventHandlers.CustomerRegistered
 {
-    public class CustomerRegisteredConsumer : IConsumer<Events.CustomerRegistered>
+    public class CustomerRegisteredConsumer : IConsumer<Domain.Entities.Customers.Events.CustomerRegistered>
     {
         private readonly ICustomerEventStoreService _eventStoreService;
         private readonly ICustomerProjectionsService _projectionsService;
@@ -18,7 +18,7 @@
             _projectionsService = projectionsService;
         }
 
-        public async Task Consume(ConsumeContext<Events.CustomerRegistered> context)
+        public async Task Consume(ConsumeContext<Domain.Entities.Customers.Events.CustomerRegistered> context)
         {
             var (aggregateId, _, _) = context.Message;
             
Index: src/WorkerService/Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WorkerService/Program.cs b/src/WorkerService/Program.cs
new file mode 100644
--- /dev/null	(date 1629833779125)
+++ b/src/WorkerService/Program.cs	(date 1629833779125)
@@ -0,0 +1,53 @@
+using Infrastructure.DependencyInjection.Extensions;
+using Infrastructure.DependencyInjection.Options;
+using Microsoft.Extensions.Configuration;
+using Microsoft.Extensions.DependencyInjection;
+using Microsoft.Extensions.Hosting;
+using Serilog;
+using WorkerService;
+
+var host = Host.CreateDefaultBuilder(args);
+
+host.UseDefaultServiceProvider((context, options) =>
+{
+    options.ValidateScopes = context.HostingEnvironment.IsDevelopment();
+    options.ValidateOnBuild = true;
+});
+
+host.ConfigureLogging((context, builder) =>
+{
+    Log.Logger = new LoggerConfiguration().ReadFrom
+        .Configuration(context.Configuration)
+        .CreateLogger();
+
+    builder.AddSerilog();
+});
+
+host.UseSerilog();
+
+host.ConfigureServices((context, services) =>
+{
+    services.AddHostedService<Worker>();
+
+    services.AddApplicationServices();
+
+    services.AddEventStoreRepositories();
+    services.AddProjectionsRepositories();
+
+    services.AddEventStoreDbContext();
+    services.AddProjectionsDbContext();
+
+    services.AddMassTransitWithRabbitMq(options
+        => context.Configuration.Bind(nameof(RabbitMqOptions), options));
+
+    services.ConfigureEventStoreOptions(
+        context.Configuration.GetSection(nameof(EventStoreOptions)));
+
+    services.ConfigureMongoDbOptions(
+        context.Configuration.GetSection(nameof(MongoDbOptions)));
+
+    services.ConfigureSqlServerRetryingOptions(
+        context.Configuration.GetSection(nameof(SqlServerRetryingOptions)));
+});
+
+await host.Build().RunAsync();
\ No newline at end of file
Index: src/WorkerService/appsettings.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WorkerService/appsettings.json b/src/WorkerService/appsettings.json
new file mode 100644
--- /dev/null	(date 1629831565169)
+++ b/src/WorkerService/appsettings.json	(date 1629831565169)
@@ -0,0 +1,33 @@
+{
+  "SqlServerRetryingOptions": {
+    "MaxRetryCount": 5,
+    "MaxSecondsRetryDelay": 5,
+    "ErrorNumbersToAdd": []
+  },
+  "EventStoreOptions": {
+    "SnapshotInterval": 5
+  },
+  "Serilog": {
+    "MinimumLevel": {
+      "Default": "Information",
+      "Override": {
+        "Default": "Information",
+        "Microsoft": "Warning",
+        "Microsoft.Hosting.Lifetime": "Information"
+      }
+    },
+    "WriteTo": [
+      {
+        "Name": "Console",
+        "Args": {
+          "Theme": "Serilog.Sinks.SystemConsole.Themes.AnsiConsoleTheme::Code, Serilog.Sinks.Console"
+        }
+      }
+    ],
+    "Enrich": [
+      "FromLogContext",
+      "WithMachineName",
+      "WithThreadId"
+    ]
+  }
+}
Index: src/Domain/Entities/Customers/Events/CustomerNameChanged.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Domain/Entities/Customers/Events/CustomerNameChanged.cs b/src/Domain/Entities/Customers/Events/CustomerNameChanged.cs
new file mode 100644
--- /dev/null	(date 1628962771239)
+++ b/src/Domain/Entities/Customers/Events/CustomerNameChanged.cs	(date 1628962771239)
@@ -0,0 +1,6 @@
+using Domain.Abstractions.Events;
+
+namespace Domain.Entities.Customers.Events
+{
+    public record CustomerNameChanged(string Name) : DomainEvent;
+}
\ No newline at end of file
Index: src/WorkerService/appsettings.Development.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WorkerService/appsettings.Development.json b/src/WorkerService/appsettings.Development.json
new file mode 100644
--- /dev/null	(date 1629123257241)
+++ b/src/WorkerService/appsettings.Development.json	(date 1629123257241)
@@ -0,0 +1,16 @@
+{
+  "RabbitMQOptions": {
+    "Host": "192.168.100.9",
+    "VirtualHost": "Customer",
+    "Username": "guest",
+    "Password": "guest"
+  },
+  "MongoDbOptions": {
+    "ConnectionString": "mongodb://{0}:{1}@{2}:{3}/{4}/?authSource=admin",
+    "Database": "Projections",
+    "Username": "mongoadmin",
+    "Password": "secret",
+    "Host": "192.168.100.9",
+    "Port": 27017
+  }
+}
Index: src/WebAPI/Startup.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using Infrastructure.DependencyInjection.Extensions;\r\nusing Infrastructure.DependencyInjection.Options;\r\nusing Microsoft.AspNetCore.Builder;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Hosting;\r\n\r\nnamespace WebAPI\r\n{\r\n    public class Startup\r\n    {\r\n        private readonly IConfiguration _configuration;\r\n\r\n        public Startup(IConfiguration configuration)\r\n        {\r\n            _configuration = configuration;\r\n        }\r\n\r\n        public void ConfigureServices(IServiceCollection services)\r\n        {\r\n            services.AddControllers();\r\n            services.AddSwaggerGen(options\r\n                => options.SwaggerDoc(\r\n                    name: \"v1\",\r\n                    info: new()\r\n                    {\r\n                        Title = \"WebAPI\",\r\n                        Version = \"v1\"\r\n                    }));\r\n\r\n            services.AddApplicationServices();\r\n\r\n            services.AddEventStoreRepositories();\r\n            services.AddProjectionsRepositories();\r\n\r\n            services.AddEventStoreDbContext();\r\n            services.AddProjectionsDbContext();\r\n            \r\n            services.AddMassTransitWithRabbitMq(options\r\n                => _configuration.Bind(nameof(RabbitMqOptions), options));\r\n\r\n            services.ConfigureEventStoreOptions(\r\n                _configuration.GetSection(nameof(EventStoreOptions)));\r\n\r\n            services.ConfigureMongoDbOptions(\r\n                _configuration.GetSection(nameof(MongoDbOptions)));\r\n\r\n            services.ConfigureSqlServerRetryingOptions(\r\n                _configuration.GetSection(nameof(SqlServerRetryingOptions)));\r\n        }\r\n\r\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\r\n        {\r\n            if (env.IsDevelopment())\r\n            {\r\n                app.UseDeveloperExceptionPage();\r\n                app.UseSwagger();\r\n                app.UseSwaggerUI(options\r\n                    => options.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"WebAPI v1\"));\r\n            }\r\n\r\n            app.UseHttpsRedirection();\r\n            app.UseRouting();\r\n            app.UseAuthorization();\r\n            app.UseEndpoints(endpoints\r\n                => endpoints.MapControllers());\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WebAPI/Startup.cs b/src/WebAPI/Startup.cs
--- a/src/WebAPI/Startup.cs	(revision 2def3e0ac165f0081b3f96a6abbfc32272b1dcc5)
+++ b/src/WebAPI/Startup.cs	(date 1629124889459)
@@ -60,9 +60,9 @@
                     => options.SwaggerEndpoint("/swagger/v1/swagger.json", "WebAPI v1"));
             }
 
-            app.UseHttpsRedirection();
+          //  app.UseHttpsRedirection();
             app.UseRouting();
-            app.UseAuthorization();
+          //  app.UseAuthorization();
             app.UseEndpoints(endpoints
                 => endpoints.MapControllers());
         }
Index: src/Domain/Entities/Customers/Customer.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing Domain.Abstractions.Aggregates;\r\nusing Domain.Abstractions.Events;\r\n\r\nnamespace Domain.Entities.Customers\r\n{\r\n    public class Customer : AggregateRoot<Guid>\r\n    {\r\n        public string Name { get; private set; }\r\n        public int Age { get; private set; }\r\n\r\n        public void Register(string name, int age)\r\n            => RaiseEvent(new Events.CustomerRegistered(Guid.NewGuid(), name, age));\r\n\r\n        public void ChangeAge(int age)\r\n            => RaiseEvent(new Events.CustomerAgeChanged(age));\r\n\r\n        public void ChangeName(string name)\r\n            => RaiseEvent(new Events.CustomerNameChanged(name));\r\n\r\n        protected override void ApplyEvent(IDomainEvent domainEvent)\r\n            => When(domainEvent as dynamic);\r\n\r\n        private void When(Events.CustomerRegistered @event)\r\n            => (Id, Name, Age) = @event;\r\n\r\n        private void When(Events.CustomerNameChanged @event)\r\n            => Name = @event.Name;\r\n\r\n        private void When(Events.CustomerAgeChanged @event)\r\n            => Age = @event.Age;\r\n\r\n        protected sealed override bool Validate()\r\n            => OnValidate<Validator, Customer>();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Domain/Entities/Customers/Customer.cs b/src/Domain/Entities/Customers/Customer.cs
--- a/src/Domain/Entities/Customers/Customer.cs	(revision 2def3e0ac165f0081b3f96a6abbfc32272b1dcc5)
+++ b/src/Domain/Entities/Customers/Customer.cs	(date 1628962830393)
@@ -1,6 +1,7 @@
 using System;
 using Domain.Abstractions.Aggregates;
 using Domain.Abstractions.Events;
+using Domain.Entities.Customers.Events;
 
 namespace Domain.Entities.Customers
 {
@@ -10,24 +11,24 @@
         public int Age { get; private set; }
 
         public void Register(string name, int age)
-            => RaiseEvent(new Events.CustomerRegistered(Guid.NewGuid(), name, age));
+            => RaiseEvent(new CustomerRegistered(Guid.NewGuid(), name, age));
 
         public void ChangeAge(int age)
-            => RaiseEvent(new Events.CustomerAgeChanged(age));
+            => RaiseEvent(new CustomerAgeChanged(age));
 
         public void ChangeName(string name)
-            => RaiseEvent(new Events.CustomerNameChanged(name));
+            => RaiseEvent(new CustomerNameChanged(name));
 
         protected override void ApplyEvent(IDomainEvent domainEvent)
             => When(domainEvent as dynamic);
 
-        private void When(Events.CustomerRegistered @event)
+        private void When(CustomerRegistered @event)
             => (Id, Name, Age) = @event;
 
-        private void When(Events.CustomerNameChanged @event)
+        private void When(CustomerNameChanged @event)
             => Name = @event.Name;
 
-        private void When(Events.CustomerAgeChanged @event)
+        private void When(CustomerAgeChanged @event)
             => Age = @event.Age;
 
         protected sealed override bool Validate()
Index: src/WebAPI/appsettings.Development.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"RabbitMQOptions\": {\r\n    \"Host\": \"192.168.100.9\",\r\n    \"Username\": \"guest\",\r\n    \"Password\": \"guest\"\r\n  },\r\n  \"MongoDbOptions\": {\r\n    \"ConnectionString\": \"mongodb://{0}:{1}@{2}:{3}/{4}/?authSource=admin\",\r\n    \"Database\": \"Projections\",\r\n    \"Username\": \"mongoadmin\",\r\n    \"Password\": \"secret\",\r\n    \"Host\": \"192.168.100.9\",\r\n    \"Port\": 27017\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/WebAPI/appsettings.Development.json b/src/WebAPI/appsettings.Development.json
--- a/src/WebAPI/appsettings.Development.json	(revision 2def3e0ac165f0081b3f96a6abbfc32272b1dcc5)
+++ b/src/WebAPI/appsettings.Development.json	(date 1629123257241)
@@ -1,6 +1,7 @@
 {
   "RabbitMQOptions": {
     "Host": "192.168.100.9",
+    "VirtualHost": "Customer",
     "Username": "guest",
     "Password": "guest"
   },
