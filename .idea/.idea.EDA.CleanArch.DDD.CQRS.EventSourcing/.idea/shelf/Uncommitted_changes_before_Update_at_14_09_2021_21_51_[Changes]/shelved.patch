Index: src/Services/Catalog/Application/UseCases/Catalogs/Queries/GetAccountDetailsConsumer.cs
===================================================================
diff --git a/src/Services/Catalog/Application/UseCases/Catalogs/Queries/GetAccountDetailsConsumer.cs b/src/Services/ShoppingCart/Application/UseCases/Queries/GetAccountDetailsConsumer.cs
rename from src/Services/Catalog/Application/UseCases/Catalogs/Queries/GetAccountDetailsConsumer.cs
rename to src/Services/ShoppingCart/Application/UseCases/Queries/GetAccountDetailsConsumer.cs
--- a/src/Services/Catalog/Application/UseCases/Catalogs/Queries/GetAccountDetailsConsumer.cs	
+++ b/src/Services/ShoppingCart/Application/UseCases/Queries/GetAccountDetailsConsumer.cs	
@@ -1,22 +1,22 @@
 using System.Threading.Tasks;
-using Application.EventSourcing.Catalogs.Projections;
+using Application.EventSourcing.Projections;
 using MassTransit;
 using Messages.Accounts.Queries;
 
-namespace Application.UseCases.Catalogs.Queries
+namespace Application.UseCases.Queries
 {
     public class GetAccountDetailsConsumer : IConsumer<GetAccountDetails>
     {
-        private readonly ICatalogProjectionsService _projectionsService;
+        private readonly IAccountProjectionsService _projectionsService;
 
-        public GetAccountDetailsConsumer(ICatalogProjectionsService projectionsService)
+        public GetAccountDetailsConsumer(IAccountProjectionsService projectionsService)
         {
             _projectionsService = projectionsService;
         }
 
         public async Task Consume(ConsumeContext<GetAccountDetails> context)
         {
-            var accountDetails = await _projectionsService.GetCatalogDetailsAsync(context.Message.Id, context.CancellationToken);
+            var accountDetails = await _projectionsService.GetAccountDetailsAsync(context.Message.Id, context.CancellationToken);
             await context.RespondAsync(accountDetails);
         }
     }
