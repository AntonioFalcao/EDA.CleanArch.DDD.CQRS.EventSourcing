Index: src/Services/ShoppingCart/Infrastructure/DependencyInjection/Extensions/ServiceCollectionExtensions.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System;\r\nusing Application.EventSourcing.EventStore;\r\nusing Application.EventSourcing.Projections;\r\nusing FluentValidation;\r\nusing Infrastructure.Abstractions.EventSourcing.Projections.Contexts;\r\nusing Infrastructure.Abstractions.EventSourcing.Projections.Contexts.BsonSerializers;\r\nusing Infrastructure.DependencyInjection.Filters;\r\nusing Infrastructure.DependencyInjection.Observers;\r\nusing Infrastructure.DependencyInjection.Options;\r\nusing Infrastructure.EventSourcing.EventStore;\r\nusing Infrastructure.EventSourcing.EventStore.Contexts;\r\nusing Infrastructure.EventSourcing.Projections;\r\nusing Infrastructure.EventSourcing.Projections.Contexts;\r\nusing MassTransit;\r\nusing Messages.Abstractions;\r\nusing Messages.JsonConverters;\r\nusing Microsoft.EntityFrameworkCore;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.Options;\r\nusing MongoDB.Bson;\r\nusing MongoDB.Bson.Serialization;\r\nusing MongoDB.Bson.Serialization.Serializers;\r\nusing Newtonsoft.Json;\r\n\r\nnamespace Infrastructure.DependencyInjection.Extensions;\r\n\r\npublic static class ServiceCollectionExtensions\r\n{\r\n    private static readonly RabbitMqOptions Options = new();\r\n\r\n    public static IServiceCollection AddMassTransitWithRabbitMq(this IServiceCollection services, Action<RabbitMqOptions> optionsAction)\r\n        => services.AddMassTransit(cfg =>\r\n            {\r\n                optionsAction(Options);\r\n\r\n                cfg.SetKebabCaseEndpointNameFormatter();\r\n\r\n                cfg.AddCommandConsumers();\r\n                cfg.AddEventConsumers();\r\n                cfg.AddQueryConsumers();\r\n\r\n                cfg.UsingRabbitMq((context, bus) =>\r\n                {\r\n                    bus.Host(\r\n                        host: Options.Host,\r\n                        port: Options.Port,\r\n                        virtualHost: Options.VirtualHost,\r\n                        host =>\r\n                        {\r\n                            host.Username(Options.Username);\r\n                            host.Password(Options.Password);\r\n                        });\r\n\r\n                    bus.MessageTopology.SetEntityNameFormatter(new KebabCaseEntityNameFormatter());\r\n                    bus.UseConsumeFilter(typeof(MessageValidatorFilter<>), context);\r\n                    bus.ConnectConsumeObserver(new LoggingConsumeObserver());\r\n                    bus.ConnectPublishObserver(new LoggingPublishObserver());\r\n                    bus.ConnectSendObserver(new LoggingSendObserver());\r\n                    bus.ConfigureEventReceiveEndpoints(context);\r\n                    bus.ConfigureEndpoints(context);\r\n                    \r\n                    bus.ConfigureJsonSerializer(settings =>\r\n                    {\r\n                        settings.Converters.Add(new DateOnlyJsonConverter()); \r\n                        settings.Converters.Add(new ExpirationDateOnlyJsonConverter()); \r\n                        return settings;\r\n                    });\r\n                    \r\n                    bus.ConfigureJsonDeserializer(settings =>\r\n                    {\r\n                        settings.Converters.Add(new DateOnlyJsonConverter()); \r\n                        settings.Converters.Add(new ExpirationDateOnlyJsonConverter()); \r\n                        return settings;\r\n                    });\r\n                });\r\n            })\r\n            .AddMassTransitHostedService();\r\n\r\n    public static IServiceCollection AddApplicationServices(this IServiceCollection services)\r\n        => services\r\n            .AddScoped<IShoppingCartEventStoreService, ShoppingCartEventStoreService>()\r\n            .AddScoped<IShoppingCartProjectionsService, ShoppingCartProjectionsService>();\r\n\r\n    public static IServiceCollection AddEventStoreDbContext(this IServiceCollection services)\r\n        => services\r\n            .AddScoped<DbContext, EventStoreDbContext>()\r\n            .AddDbContext<EventStoreDbContext>();\r\n\r\n    public static IServiceCollection AddProjectionsDbContext(this IServiceCollection services)\r\n    {\r\n        BsonSerializer.RegisterSerializer(new DateOnlyBsonSerializer());\r\n        BsonSerializer.RegisterSerializer(new GuidSerializer(GuidRepresentation.CSharpLegacy));\r\n        \r\n        return services.AddScoped<IMongoDbContext, ProjectionsDbContext>();\r\n    }\r\n\r\n    public static IServiceCollection AddEventStoreRepositories(this IServiceCollection services)\r\n        => services.AddScoped<IShoppingCartEventStoreRepository, ShoppingCartEventStoreRepository>();\r\n\r\n    public static IServiceCollection AddProjectionsRepositories(this IServiceCollection services)\r\n        => services.AddScoped<IShoppingCartProjectionsRepository, ShoppingCartProjectionsRepository>();\r\n\r\n    public static IServiceCollection AddMessageFluentValidation(this IServiceCollection services)\r\n        => services.AddValidatorsFromAssemblyContaining(typeof(IMessage));\r\n\r\n    public static OptionsBuilder<SqlServerRetryingOptions> ConfigureSqlServerRetryingOptions(this IServiceCollection services, IConfigurationSection section)\r\n        => services\r\n            .AddOptions<SqlServerRetryingOptions>()\r\n            .Bind(section)\r\n            .ValidateDataAnnotations()\r\n            .ValidateOnStart();\r\n\r\n    public static OptionsBuilder<EventStoreOptions> ConfigureEventStoreOptions(this IServiceCollection services, IConfigurationSection section)\r\n        => services\r\n            .AddOptions<EventStoreOptions>()\r\n            .Bind(section)\r\n            .ValidateDataAnnotations()\r\n            .ValidateOnStart();\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Services/ShoppingCart/Infrastructure/DependencyInjection/Extensions/ServiceCollectionExtensions.cs b/src/Services/ShoppingCart/Infrastructure/DependencyInjection/Extensions/ServiceCollectionExtensions.cs
--- a/src/Services/ShoppingCart/Infrastructure/DependencyInjection/Extensions/ServiceCollectionExtensions.cs	(revision 69449e9f27adf8a90ff41f68eaac0a1c8ea746ef)
+++ b/src/Services/ShoppingCart/Infrastructure/DependencyInjection/Extensions/ServiceCollectionExtensions.cs	(date 1636477251593)
@@ -21,7 +21,6 @@
 using MongoDB.Bson;
 using MongoDB.Bson.Serialization;
 using MongoDB.Bson.Serialization.Serializers;
-using Newtonsoft.Json;
 
 namespace Infrastructure.DependencyInjection.Extensions;
 
