@using WebAPP.ViewModels
@using Contracts.Services.Catalog
@using System.ComponentModel
@inject CatalogCanvasViewModel ViewModel

<BSOffCanvas @ref="_offCanvas" Placement="Placement.Right">
    <Header>Create Catalog</Header>
    <Content >
        <div class="d-grid gap-2">
            <BSLabel>Title</BSLabel>
            <BSInput InputType="InputType.Text" placeholder="Title" @bind-Value="ViewModel.Catalog.Title" IsDisabled="_creating"/>
            <BSLabel>Description</BSLabel>
            <BSInput InputType="InputType.TextArea" placeholder="Description" @bind-Value="ViewModel.Catalog.Description" IsDisabled="_creating"/>
            <BSButton MarginTop="Margins.Large" Color="BSColor.Dark" OnClick="CreateAsync" IsDisabled="_creating">
                @if (_creating)
                {
                    <BSSpinner Size="Size.Small" Color="BSColor.Light"/>
                }
                else
                {
                    <p style="margin: auto">Create</p>
                }
            </BSButton>
        </div>
    </Content>
</BSOffCanvas>

@code {

    protected override async Task OnInitializedAsync()
    {
        ViewModel.PropertyChanged += async (_, _) => { await InvokeAsync(StateHasChanged); };
        await base.OnInitializedAsync();
    }

    private readonly CancellationTokenSource _cancellationTokenSource = new();

    [Parameter]
    public EventCallback<Request.CreateCatalog> OnCreated { get; set; }

    private BSOffCanvas _offCanvas;
    private bool _creating;

    private async Task CreateAsync()
    {
        _creating = true;
        await ViewModel.CreateAsync(OnCreated, _cancellationTokenSource.Token);
        await _offCanvas.HideAsync();
        _creating = false;
    }

    public Task ShowAsync()
        => _offCanvas.ShowAsync();

    public Task HideAsync()
        => _offCanvas.HideAsync();

    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e) 
        => await InvokeAsync(StateHasChanged);

    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
        ViewModel.PropertyChanged -= OnPropertyChangedHandler;
    }

}