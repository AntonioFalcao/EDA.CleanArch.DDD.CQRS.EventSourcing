@using WebAPP.ViewModels
@using Contracts.Services.Catalog
@using Contracts.Abstractions.Paging

@inject CatalogGridViewModel ViewModel

<div class="row row-cols-md-4">
    @foreach (var card in ViewModel.Cards)
    {
        <BSCol MarginTopAndBottom="Margins.ExtraSmall" Padding="Padding.None">
            <CatalogCard ViewModel="card" OnDeleted="Delete"></CatalogCard>
        </BSCol>
    }
</div>
<BSPagination Align="Align.Center">
    <BSPaginationItem IsDisabled="@(ViewModel.Page.HasPrevious is false)" @onclick="MoveToPreviewAsync">Previous</BSPaginationItem>
    @for (var paging = 1; paging <= ViewModel.Page.Current; paging++)
    {
        var current = paging;
        <BSPaginationItem @onclick="() => MoveToPageAsync(current)">@current</BSPaginationItem>
    }
    <BSPaginationItem IsDisabled="@(ViewModel.Page.HasNext is false)" @onclick="MoveToNextAsync">Next</BSPaginationItem>
</BSPagination>


@code {

    private readonly CancellationTokenSource _cancellationTokenSource = new();

    protected override async Task OnInitializedAsync()
        => await ViewModel.FetchDataAsync(_cancellationTokenSource.Token);

    public void Add(CatalogCardViewModel card)
    {
        ViewModel.Add(card);
        StateHasChanged();
    }

    private void Delete(Guid id)
        => ViewModel.Delete(id);

    private async Task MoveToPageAsync(int page)
        => await ViewModel.MoveToPageAsync(page - 1, _cancellationTokenSource.Token);

    private async Task MoveToNextAsync()
        => await ViewModel.MoveToNextAsync(_cancellationTokenSource.Token);

    private async Task MoveToPreviewAsync()
        => await ViewModel.MoveToPreviewAsync(_cancellationTokenSource.Token);

    private void Dispose()
        => _cancellationTokenSource.Cancel();

}