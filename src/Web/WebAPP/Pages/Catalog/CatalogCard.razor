@using WebAPP.ViewModels
@using Microsoft.AspNetCore.Components
@using WebAPP.Models

<BSCard CardType="CardType.Card" Padding="Padding.None">
    <BSCard CardType="CardType.Header">
        @if (_isEditingTitle)
        {
            <BSInput InputType="InputType.Text" @bind-Value="@Catalog.Title"/>
            <BSButton Class="bi bi-pencil-square" Color="BSColor.Warning" OnClick=@(async () => {ToggleTitle(); await ChangeTitleAsync(); })></BSButton>
        }
        else
        {
            @Catalog.Title
            <BSButton Class="bi bi-pencil-square" Color="BSColor.Warning" OnClick=@(ToggleTitle)></BSButton>
        }
    </BSCard>
    <BSCard CardType="CardType.Image" src="placeholder:286x180"/>
    <BSCard CardType="CardType.Body">
        <BSCard CardType="CardType.Title">@Catalog.Title</BSCard>
        <BSCard CardType="CardType.Subtitle">
            @if (_isEditingDescription)
            {
                <BSInput InputType="InputType.Text" @bind-Value="@Catalog.Description"/>
                <BSButton Class="bi bi-pencil-square" Color="BSColor.Warning" OnClick=@(async () => {ToggleDescription(); await ChangeDescriptionAsync(); })></BSButton>
            }
            else
            {
                @Catalog.Description
                <BSButton Class="bi bi-pencil-square" Color="BSColor.Warning" OnClick=@(ToggleDescription)></BSButton>
            }
        </BSCard>
        <BSButton Class="bi bi-trash3" Color="BSColor.Danger" OnClick="DeleteAsync"></BSButton>
    </BSCard>
    <BSCard CardType="CardType.Footer">Last updated 3 mins ago</BSCard>
</BSCard>

@code {

    [CascadingParameter] Catalogs CatalogState { get; set; }

    [Parameter]
    public CatalogModel Catalog { get; set; }

    private readonly CancellationTokenSource _cancellationTokenSource = new();

    private bool _isEditingDescription;
    private bool _isEditingTitle;

    private void ToggleDescription()
        => _isEditingDescription = !_isEditingDescription;

    private void ToggleTitle()
        => _isEditingTitle = !_isEditingTitle;

    private async Task ChangeTitleAsync()
        => await CatalogState.ChangeCatalogTitleAsync(Catalog.Id, Catalog.Title);

    private async Task ChangeDescriptionAsync()
        => await CatalogState.ChangeCatalogDescriptionAsync(Catalog.Id, Catalog.Description);

    private async Task DeleteAsync()
    => await CatalogState.DeleteAsync(Catalog.Id);    

    private void Dispose()
        => _cancellationTokenSource.Cancel();

}