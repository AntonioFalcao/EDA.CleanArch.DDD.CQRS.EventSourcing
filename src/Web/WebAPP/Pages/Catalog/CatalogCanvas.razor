@using WebAPP.ViewModels
@using Contracts.Services.Catalog
@using System.ComponentModel
@using WebAPP.Models;
@using WebAPP.Pages.Catalog.Store

@inject IDispatcher Dispatcher
@inject IState<CatalogStore.CatalogState> CatalogState
@inject IActionSubscriber ActionSubscriber

<BSOffCanvas @ref="_offCanvas" Placement="Placement.Right" >
    <Header>Create Catalog</Header>
    <Content >
        <div class="d-grid gap-2">
            <BSLabel>Title</BSLabel>
            <BSInput InputType="InputType.Text" placeholder="Title" @bind-Value="Catalog.Title" IsDisabled="_creating"/>
            <BSLabel>Description</BSLabel>
            <BSInput InputType="InputType.TextArea" placeholder="Description" @bind-Value="Catalog.Description" IsDisabled="_creating"/>
            <BSButton MarginTop="Margins.Large" Color="BSColor.Dark" OnClick="CreateAsync" IsDisabled="_creating">
                @if (_creating)
                {
                    <BSSpinner Size="Size.Small" Color="BSColor.Light"/>
                }
                else
                {
                    <p style="margin: auto">Create</p>
                }
            </BSButton>
        </div>
    </Content>
</BSOffCanvas>

@code {
    public CatalogModel Catalog => CatalogState.Value.Catalog;

    private BSOffCanvas _offCanvas;
    private bool _creating;

    protected override Task OnInitializedAsync()
    {
        ActionSubscriber.SubscribeToAction<CatalogStore.CatalogSetCanvasVisibilityAction>(this, async (action) =>
        {
            if (action.CanvasVisibility) await ShowAsync();
            else await HideAsync();
        });
        
        return base.OnInitializedAsync();
    }

    private async Task CreateAsync()
    {
        _creating = true;
        
        Dispatcher.Dispatch(new CatalogStore.CatalogCreateAction()); 
        
        _creating = false;
    }

    public Task ShowAsync()
        => _offCanvas.ShowAsync();

    public Task HideAsync()
        => _offCanvas.HideAsync();

}