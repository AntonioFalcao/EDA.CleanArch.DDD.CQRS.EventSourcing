@page "/catalog"

@using ECommerce.Contracts.Catalogs

@inject HttpClient _http
@inject IBlazorStrap _blazorStrap

<NavBar/>
<SearchBar/>
<BSToaster/>

@if (_catalogs == null)
{
    <div style="display:flex; gap:10px; justify-content:center; align-items:center">
        <div class="spinner-border" role="status"></div>
    </div>

    return;
}

<BSOffCanvas @ref="_offCanvas" Placement="Placement.Right">
    <Header>Create Catalog</Header>
    <Content >
        <div class="d-grid gap-2">
            <BSLabel>Title</BSLabel>
            <BSInput InputType="InputType.Text" placeholder="Title" @bind-Value="_title"/>
            <BSLabel>Description</BSLabel>
            <BSInput InputType="InputType.TextArea" placeholder="Description" @bind-Value="_description"/>
            <BSButton MarginTop="Margins.Large" Size="Size.Medium" Color="BSColor.Dark" OnClick="CreateAsync">Create</BSButton>
        </div>
    </Content>
</BSOffCanvas>

<BSContainer>
    <BSRow Align="Align.Center" Justify="Justify.Around">
        <BSCol Margin="Margins.Large">
            <h5 class="m-0">Catalogs</h5>
        </BSCol>
        <BSCol Column="1">
            <BSButton Class="bi bi-plus-lg" Color="BSColor.Light" style="font-size: 2.000rem;" OnClick="_offCanvas.ShowAsync"/>
        </BSCol>
    </BSRow>
    @if (_catalogs.Items.Any() is false)
    {
        <p>
            No Catalogs, try to add one :)
        </p>
    }
    else
    {
        <BSRow>
            @foreach (var catalog in _catalogs.Items)
            {
                <BSCard CardType="CardType.Card" Margin="Margins.ExtraSmall" Padding="Padding.None" style="width: 20.11rem;">
                    <BSCard CardType="CardType.Header">@catalog.Title</BSCard>
                    <BSCard CardType="CardType.Body">
                        <BSCard CardType="CardType.Title">@catalog.Title</BSCard>
                        <BSCard CardType="CardType.Subtitle">@catalog.Description</BSCard>
                        <BSButton Color="BSColor.Warning" OnClick=@(() => EditAsync("New Title", catalog.Id))>Edit</BSButton>
                        <BSButton Color="BSColor.Danger" OnClick="() => DeleteAsync(catalog.Id)">Delete</BSButton>
                    </BSCard>
                </BSCard>
            }
        </BSRow>
        <BSPagination Align="Align.Center">
            <BSPaginationItem IsDisabled=@(_catalogs.PageInfo.HasPrevious is false) @onclick="MoveToPreview">Previous</BSPaginationItem>
            @for (var paging = 1; paging <= _catalogs.PageInfo.Current; paging++)
            {
                var current = paging;
                <BSPaginationItem @onclick="() => MoveToPage(current)">@current</BSPaginationItem>
            }
            <BSPaginationItem IsDisabled=@(_catalogs.PageInfo.HasNext is false) @onclick="MoveToNext">Next</BSPaginationItem>
        </BSPagination>
    }
</BSContainer >

@code {

    private Responses.Catalogs _catalogs;
    private BSOffCanvas _offCanvas;

    private string _title;
    private string _description;


    protected override Task OnInitializedAsync()
        => GetCatalogsAsync();

    private async Task GetCatalogsAsync(int limit = 8, int offset = 0)
    {
        try
        {
            _catalogs = await _http.GetFromJsonAsync<Responses.Catalogs>($"/api/catalogs/get-catalogs?limit={limit}&offset={offset}");
        }
        catch (Exception e)
        {
            Failed(e.Message);
        }
    }

    private async Task CreateAsync()
    {
        try
        {
            var request = new {Title = _title, Description = _description};
            var response = await _http.PostAsJsonAsync("/api/catalogs/create-catalog", request);

            if (response.IsSuccessStatusCode)
            {
                await _offCanvas.HideAsync();
                Success();

                _title = string.Empty;
                _description = string.Empty;

                await GetCatalogsAsync();
            }
            else Failed(response.ReasonPhrase);
        }
        catch (Exception e)
        {
            Failed(e.Message);
        }
    }

    private async Task EditAsync(string title, Guid catalogId)
    {
        try
        {
            var request = new {catalogId, title};
            var response = await _http.PutAsJsonAsync("/api/catalogs/update-catalog", request);

            if (response.IsSuccessStatusCode)
            {
                Success();
                await GetCatalogsAsync();
            }
            else Failed(response.ReasonPhrase);
        }
        catch (Exception e)
        {
            Failed(e.Message);
        }
    }

    private async Task DeleteAsync(Guid catalogId)
    {
        try
        {
            var response = await _http.DeleteAsync($"/api/catalogs/delete-catalog/{catalogId}");

            if (response.IsSuccessStatusCode)
            {
                Success();
                await GetCatalogsAsync();
            }
            else Failed(response.ReasonPhrase);
        }
        catch (Exception e)
        {
            Failed(e.Message);
        }
    }

    private void Success()
    {
        _blazorStrap.Toaster.Add("Success", "Catalog created", o =>
        {
            o.Color = BSColor.Success;
            o.CloseAfter = 2000;
            o.Toast = Toast.BottomRight;
        });
    }

    private void Failed(string error = default)
    {
        _blazorStrap.Toaster.Add("Error", error ?? "It was not possible to create a new Catalog", o =>
        {
            o.Color = BSColor.Danger;
            o.CloseAfter = 2000;
            o.Toast = Toast.BottomRight;
        });
    }

    private Task MoveToPage(int current)
        => GetCatalogsAsync(offset: current - 1);

    private async Task MoveToNext()
    {
        if (_catalogs.PageInfo.HasNext)
            await GetCatalogsAsync(offset: _catalogs.PageInfo.Current);
    }

    private async Task MoveToPreview()
    {
        if (_catalogs.PageInfo.HasPrevious)
            await GetCatalogsAsync(offset: _catalogs.PageInfo.Current - 2);
    }

}